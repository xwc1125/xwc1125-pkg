// Code generated by MockGen. DO NOT EDIT.
// Source: sliding_window.go

// Package slidingwindow is a generated GoMock package.
package slidingwindow

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSlidingWindow is a mock of SlidingWindow interface.
type MockSlidingWindow struct {
	ctrl     *gomock.Controller
	recorder *MockSlidingWindowMockRecorder
}

// MockSlidingWindowMockRecorder is the mock recorder for MockSlidingWindow.
type MockSlidingWindowMockRecorder struct {
	mock *MockSlidingWindow
}

// NewMockSlidingWindow creates a new mock instance.
func NewMockSlidingWindow(ctrl *gomock.Controller) *MockSlidingWindow {
	mock := &MockSlidingWindow{ctrl: ctrl}
	mock.recorder = &MockSlidingWindowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlidingWindow) EXPECT() *MockSlidingWindowMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockSlidingWindow) Allow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockSlidingWindowMockRecorder) Allow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockSlidingWindow)(nil).Allow))
}

// SetLimit mocks base method.
func (m *MockSlidingWindow) SetLimit(rate int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLimit", rate)
}

// SetLimit indicates an expected call of SetLimit.
func (mr *MockSlidingWindowMockRecorder) SetLimit(rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimit", reflect.TypeOf((*MockSlidingWindow)(nil).SetLimit), rate)
}

// SetWindow mocks base method.
func (m *MockSlidingWindow) SetWindow(window time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWindow", window)
}

// SetWindow indicates an expected call of SetWindow.
func (mr *MockSlidingWindowMockRecorder) SetWindow(window interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWindow", reflect.TypeOf((*MockSlidingWindow)(nil).SetWindow), window)
}
